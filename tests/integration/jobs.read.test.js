// C:\Apps\Brian\tests\integration\jobs.read.test.js
const chai = require('chai');
const chaiHttp = require('chai-http');
const app = require('../../src/index'); // Adjust path to your app's entry point
const { sequelize, Project, Job } = require('../../src/models'); // Adjust path to your models
const { createTestUser } = require('../helpers/authTestHelper'); // Import createTestUser
const { createTestProject, createTestJob } = require('../test-helpers'); // Import createTestProject and createTestJob

chai.use(chaiHttp);
const expect = chai.expect;

describe('GET /api/v1/jobs', () => {
    let testUser;
    let token;
    let testProject1;
    let testJob1;
    let testJob2;

    beforeAll(async () => { // Changed from before to beforeAll
        // Ensure a clean slate â€“ removes Default Test Job from globalSetup
        await Job.destroy({ where: {}, truncate: true, cascade: true });

        // Clean and setup database before tests
        // await sequelize.sync({ force: true }); // Removed: Handled by globalSetup
        const { user: createdUser, token: generatedToken } = await createTestUser(); // Use helper correctly
        testUser = createdUser;
        token = generatedToken; // Assign token generated by createTestUser helper

        // Create necessary data
        testProject1 = await createTestProject({ name: 'Job Test Project 1' }); // Returns { project, ownerId }
        testJob1 = await createTestJob({ title: 'Test Job 1', projectId: testProject1.project.id }); // Correctly access project.id
        testJob2 = await createTestJob({ title: 'Test Job 2', projectId: testProject1.project.id, status: 'in progress' }); // Correctly access project.id
    });

    afterAll(async () => { // Changed from after to afterAll
        // Clean up database after tests
        // await sequelize.sync({ force: true }); // Removed: Handled by globalSetup teardown implicitly
    });

    it('should return 401 Unauthorized if no token is provided', async () => {
        const res = await chai.request(app).get('/api/v1/jobs');
        expect(res).to.have.status(401);
    });

    it('should return a list of jobs', async () => {
        const res = await chai.request(app)
            .get('/api/v1/jobs')
            .set('Authorization', `Bearer ${token}`);

        expect(res).to.have.status(200);
        expect(res.body).to.be.an('object');
        expect(res.body.success).to.be.true;
        expect(res.body.data).to.be.an('array');
        expect(res.body.data.length).to.equal(2); // Assuming 2 jobs were created
        expect(res.body.data[0]).to.have.property('title', testJob1.title);
        expect(res.body.data[1]).to.have.property('title', testJob2.title);
        // Check that project is NOT included by default
        expect(res.body.data[0]).to.not.have.property('project');
    });

    it('should return a list of jobs including associated project when include=project is specified', async () => {
        const res = await chai.request(app)
            .get('/api/v1/jobs?include=project')
            .set('Authorization', `Bearer ${token}`);

        expect(res).to.have.status(200);
        expect(res.body.success).to.be.true;
        expect(res.body.data).to.be.an('array');
        expect(res.body.data.length).to.equal(2);
        expect(res.body.data[0]).to.have.property('ProjectDetails'); // Use the correct alias
        expect(res.body.data[0].ProjectDetails).to.be.an('object');
        expect(res.body.data[0].ProjectDetails).to.have.property('id', testProject1.project.id);
        expect(res.body.data[0].ProjectDetails).to.have.property('name', testProject1.project.name);
        expect(res.body.data[1]).to.have.property('ProjectDetails'); // Use the correct alias
        expect(res.body.data[1].ProjectDetails).to.have.property('id', testProject1.project.id);
    });

    // Add more tests here for filtering, pagination, etc. if implemented
});