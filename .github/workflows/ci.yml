name: Backend + Frontend CI

on: [push, pull_request]

jobs:
  backend-unit:
    runs-on: ubuntu-latest
    env: # Add env block for Codecov token
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: ci
          POSTGRES_DB: ci_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - run: npm ci

      - run: npm test -- --coverage

      - name: Upload coverage to Codecov # Added name for clarity
        if: ${{ env.CODECOV_TOKEN != '' }} # Use env var in condition
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false # Allow this step to fail without breaking the build
          token: ${{ env.CODECOV_TOKEN }} # Use env var for token

      - name: Dump failing log to PR comment
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobId   = process.env.GITHUB_JOB   // name of this job
            const runId   = process.env.GITHUB_RUN_ID
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              run_id: runId
            })
            const thisJob = jobs.jobs.find(j => j.name === jobId)
            if (!thisJob) return
            const { data: log } = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              job_id: thisJob.id
            })
            const tail = log.split('\n').slice(-200).join('\n')
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: [
                `❌ **${jobId} failed**`,
                '<details><summary>Last 200 lines</summary>',
                '```text', tail, '```',
                '</details>'
              ].join('\n')
            })

      - name: CI success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `✅ **${process.env.GITHUB_JOB} passed** on commit \`${process.env.GITHUB_SHA.slice(0,7)}\`.`
            })

  e2e:
    needs: backend-unit
    runs-on: ubuntu-latest
    env: # Add env block for Codecov token
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install root deps
        run: npm ci

      - name: Migrate & seed dev DB
        working-directory: .
        run: |
          echo "Running migrations..."
          # run migrations against the postgres service
          npx sequelize-cli db:migrate --env development
          echo "Seeding database..."
          # seed the admin user (dev@example.com / password123)
          npx sequelize-cli db:seed:all --env development

      - name: Start backend and wait
        run: |
          echo "Starting backend server..."
          npm run dev &
          echo $! > backend.pid
          echo "Backend PID: $(cat backend.pid). Waiting 10s for server to start..."
          sleep 10

      - name: Install frontend deps and run Cypress e2e
        run: |
          echo "Changing to frontend directory..."
          cd frontend
          echo "Installing frontend dependencies..."
          npm ci
          echo "Running Cypress tests..."
          npm run test:e2e

      - name: Stop backend
        if: always()
        run: kill $(cat backend.pid)

      - name: Dump failing log to PR comment
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobId   = process.env.GITHUB_JOB   // name of this job
            const runId   = process.env.GITHUB_RUN_ID
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              run_id: runId
            })

      - name: CI success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `✅ **${process.env.GITHUB_JOB} passed** on commit \`${process.env.GITHUB_SHA.slice(0,7)}\`.`
            })
            const thisJob = jobs.jobs.find(j => j.name === jobId)
            if (!thisJob) return
            const { data: log } = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              job_id: thisJob.id
            })
            const tail = log.split('\n').slice(-200).join('\n')
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: [
                `❌ **${jobId} failed**`,
                '<details><summary>Last 200 lines</summary>',
                '```text', tail, '```',
                '</details>'
              ].join('\n')
            })
